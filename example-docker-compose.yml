services:

### Applications Code Container #############################

  applications:
    image: tianon/true
    container_name: applications
    volumes:
      - /Users/n3m0/.ssh:/root/.ssh
      - ${APPLICATION}:/var/www

### Run GO Application ############################################
  # app:
  #   platform: linux/x86_64
  #   image: docker-repo-url
  #   container_name: go_stage
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     - GO111MODULE=on
  #     - CONSUL=false
  #     - CONSUL_URL=127.0.0.1:8500
  #     - CONSUL_PATH=test
  #     - CONFIG_JSON=/src/bin/app/stage.json
  #   command: serve  # Run the 'serve' command when the container starts
  #   links:
  #     - postgres
  #     - redis
  #   networks:
  #     - backend
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  # volumes:
  #   - ./stage.json:/src/bin/app/stage.json

### nginx Setup for virtual host ############################################

  nginx:
    container_name: nginx
    build:
      context: ./docker/nginx/
      args:
        - PHP_UPSTREAM=php
    volumes_from:
      - applications
    volumes:
      - ./logs/nginx/:/var/log/nginx
      - ./docker/nginx/sites:/etc/nginx/sites-available
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - php
    networks:
      - frontend
      - backend

### nginx Setup for single host ############################################

#  nginx:
#    image: nginx:1.13.6
#    ports:
#      - 80:80
#    volumes:
#      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
#    volumes_from:
#      - php

### php Setup ############################################

  php:
    build: ./docker/php/${PHP_VERSION}
    container_name: php
    volumes_from:
      - applications
#    volumes:
#      - ./docker/php/custom.ini:/usr/local/etc/php/conf.d/custom.ini
    links:
      - mysql
#      - redis
#      - postgres
    networks:
      - backend

### mysql8 Setup ###########################################

  mysql8:
#    image: mysql:8.0
    container_name: mysql8
    build:
      context: ./docker/mysql8
    ports:
      - "${DB_PORT_MYSQL_8}:3306"
    environment:
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - TZ=${DB_TIMEZONE}
    volumes:
      - ./docker/mysql8/conf.d:/etc/mysql/conf.d:ro
      - ./docker/mysql8/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
#      - ./docker/mysql8/initdb.d:/docker-entrypoint-initdb.d:ro
      - ./backup/mysql8/logs:/var/log/mysql:rw
      - ./backup/mysql8/data:/var/lib/mysql
    networks:
      - backend

### mysql Setup ############################################

  mysql:
    # FOR (M1 MAC)ADD NEXT LINE
    #platform: linux/x86_64
    container_name: mysql
    build:
      context: ./docker/mysql
    environment:
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
    volumes:
      - ./backup/mysql:/var/lib/mysql
      - ./docker/mysql/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    user: mysql
    ports:
      - "${DB_PORT}:3306"
    networks:
      - backend

### Adminer Setup ############################################

  adminer:
    container_name: adminer
    image: adminer:${ADMINER_VERSION}-standalone
    ports:
      - ${ADMINER_PORT}:8080
    env_file:
      - .env
    links:
      - mysql
#      - postgres:db
    networks:
      - backend

### postgres Setup ############################################

## postgres Setup ############################################
  # postgres:
  #  platform: "linux/amd64"
  #  container_name: postgres
  #  image: postgres:13.16
  #  command: ["postgres", "-c", "log_statement=all"]
  #  ports:
  #    - 5432:5432
  #  healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_DB}"]  # PostgreSQL health check command
  #     interval: 10s  # Interval between health checks
  #     timeout: 5s    # Timeout for each health check
  #     retries: 5     # Number of retries before marking as unhealth
  #  volumes:
  #    - ./backup/postgres_thirteen/database:/var/lib/postgresql/data
  #  environment:
  #    - POSTGRES_USER=${POSTGRES_USER}
  #    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #    - POSTGRES_DB=${POSTGRES_DB}
  #  networks:
  #    - backend

### Redis Setup ############################################

  redis:
    container_name: redis
    image: redis:latest
    ports:
      - ${REDEIS_PORT}:6379
    command: >
      --requirepass ${REDIS_PASSWORD}
    volumes:
      - ./backup/redis/data:/data
    networks:
      - backend

### Mongo Setup ############################################

#  mongo:
#    container_name: mongo
#    image: mongo:3
#    ports:
#      - 27017:27017
#    volumes:
#      - ./backup/mongo:/data/db
#    networks:
#      - backend

### consul Setup ############################################

#  consul:
#    container_name: consul
#    image: bitnami/consul
#    ports:
#      - 8500:8500
#    volumes:
#      - ./backup/consul/data:/bitnami
#    networks:
#      - backend

### rabbitmq Setup ############################################

#  rabbit:
#    container_name: rabbit
#    image: "rabbitmq:3-management"
#    hostname: "rabbitmq"
#    environment:
#      RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
#      RABBITMQ_DEFAULT_USER: "rabbitmq"
#      RABBITMQ_DEFAULT_PASS: "rabbitmq"
#      RABBITMQ_DEFAULT_VHOST: "/"
#    ports:
#      - "15672:15672"
#      - "5672:5672"
#    labels:
#      NAME: "rabbitmq"
#    volumes:
#      - ./backup/rabbitmq:/var/lib/rabbitmq
#      #- "./docker/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins"
#      #- "./docker/rabbitmq/rabbitmq.config:/etc/rabbitmq/rabbitmq.config:ro"
#      #- "./docker/rabbitmq/autocluster-0.4.1.ez:/usr/lib/rabbitmq/lib/rabbitmq_server-3.5.5/plugins/autocluster-0.4.1.ez"
#    networks:
#      - backend

# ## Elastic search Setup ############################################
#   elasticsearch:
#     container_name: elasticsearch
#     image: docker.elastic.co/elasticsearch/elasticsearch:8.4.0
#     restart: always
#     environment:      
#       # ES_JAVA_OPTS: -Xms512m -Xmx512m
#       # discovery.type: single-node
#       #- cluster.routing.allocation.disk.threshold_enabled=false
#       - ELASTIC_PASSWORD=changeme
#       - discovery.type=single-node
#       - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#       - xpack.security.enabled=false
#       - node.name=elasticsearch-node-1
#     ulimits:
#       memlock:
#         soft: -1
#         hard: -1
#       nofile:
#         soft: 65536
#         hard: 65536
#     cap_add:
#       - IPC_LOCK
#     volumes:
#       - ./backup/elasticsearch/data:/usr/share/elasticsearch/data
#     ports:
#       - 9200:9200
#       - 9300:9300
#     networks:
#       - backend

# ## kibana Setup ############################################
#   kibana:
#     container_name: kibana
#     image: docker.elastic.co/kibana/kibana:8.4.0
#     restart: always
#     ports:
#       - 5601:5601
#     links:
#       - elasticsearch
#     environment:
#       - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
#     # volumes:
#     #   - ./backup/kibana:/kibana
#     networks:
#       - backend
#     depends_on:
#       - elasticsearch

## beanstalkd Setup ############################################
  beanstalkd:
    container_name: beanstalkd
    image: schickling/beanstalkd
    ports:
      - 11300:11300
    volumes:
      - ~/.backup/beanstalkd/data/bidzauto:/binlog
    networks:
      - backend
## beanstalk-console Setup ############################################
  beanstalk-console:
    container_name: beanstalkd-console
    image: schickling/beanstalkd-console:latest
    ports:
    - 2080:2080
    links:
      - beanstalkd
    networks:
      - backend

### Networks Setup ############################################

networks:
  frontend:
    driver: "bridge"
  backend:
    driver: "bridge"
