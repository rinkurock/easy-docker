version: '2'

services:

### Applications Code Container #############################

  applications:
    image: tianon/true
    container_name: applications
    volumes:
      - /Users/n3m0/.ssh:/root/.ssh
      - ${APPLICATION}:/var/www

### nginx Setup for virtual host ############################################

  nginx:
    container_name: nginx
    build:
      context: ./docker/nginx/
      args:
        - PHP_UPSTREAM=php
    volumes_from:
      - applications
    volumes:
      - ./logs/nginx/:/var/log/nginx
      - ./docker/nginx/sites:/etc/nginx/sites-available
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - php
    networks:
      - frontend
      - backend

### nginx Setup for single host ############################################

#  nginx:
#    image: nginx:1.13.6
#    ports:
#      - 80:80
#    volumes:
#      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
#    volumes_from:
#      - php

### php Setup ############################################

  php:
    build: ./docker/php/${PHP_VERSION}
    container_name: php
    volumes_from:
      - applications
#    volumes:
#      - ./docker/php/custom.ini:/usr/local/etc/php/conf.d/custom.ini
    links:
      - mysql
#      - redis
#      - postgres
    networks:
      - backend

### mysql8 Setup ###########################################

  mysql8:
#    image: mysql:8.0
    container_name: mysql8
    build:
      context: ./docker/mysql8
    ports:
      - "${DB_PORT_MYSQL_8}:3306"
    environment:
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - TZ=${DB_TIMEZONE}
    volumes:
      - ./docker/mysql8/conf.d:/etc/mysql/conf.d:ro
      - ./docker/mysql8/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
#      - ./docker/mysql8/initdb.d:/docker-entrypoint-initdb.d:ro
      - ./backup/mysql8/logs:/var/log/mysql:rw
      - ./backup/mysql8/data:/var/lib/mysql
    networks:
      - backend

### mysql Setup ############################################

  mysql:
    container_name: mysql
    build:
      context: ./docker/mysql
    environment:
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
    volumes:
      - ./backup/mysql:/var/lib/mysql
      - ./docker/mysql/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    user: mysql
    ports:
      - "${DB_PORT}:3306"
    networks:
      - backend

### Adminer Setup ############################################

  adminer:
    container_name: adminer
    image: adminer:${ADMINER_VERSION}-standalone
    ports:
      - ${ADMINER_PORT}:8080
    env_file:
      - .env
    links:
      - mysql
#      - postgres:db
    networks:
      - backend

### postgres Setup ############################################

#  postgres:
#    container_name: postgres
#    image: postgres:10.1
#    ports:
#      - 5432:5432
#    volumes:
#      - ./backup/postgres/database:/var/lib/postgresql/data
#    environment:
#      - POSTGRES_USER=${POSTGRES_USER}
#      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#      - POSTGRES_DB=${POSTGRES_DB}
#    networks:
#      - backend

### Redis Setup ############################################

  redis:
    container_name: redis
    image: redis:latest
    ports:
      - ${REDEIS_PORT}:6379
    volumes:
      - ./backup/redis/data:/data
    networks:
      - backend

### Mongo Setup ############################################

#  mongo:
#    container_name: mongo
#    image: mongo:3
#    ports:
#      - 27017:27017
#    volumes:
#      - ./backup/mongo:/data/db
#    networks:
#      - backend

### consul Setup ############################################

#  consul:
#    container_name: consul
#    image: bitnami/consul
#    ports:
#      - 8500:8500
#    volumes:
#      - ./backup/consul/data:/bitnami
#    networks:
#      - backend

### rabbitmq Setup ############################################

#  rabbit:
#    container_name: rabbit
#    image: "rabbitmq:3-management"
#    hostname: "rabbitmq"
#    environment:
#      RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
#      RABBITMQ_DEFAULT_USER: "rabbitmq"
#      RABBITMQ_DEFAULT_PASS: "rabbitmq"
#      RABBITMQ_DEFAULT_VHOST: "/"
#    ports:
#      - "15672:15672"
#      - "5672:5672"
#    labels:
#      NAME: "rabbitmq"
#    volumes:
#      - ./backup/rabbitmq:/var/lib/rabbitmq
#      #- "./docker/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins"
#      #- "./docker/rabbitmq/rabbitmq.config:/etc/rabbitmq/rabbitmq.config:ro"
#      #- "./docker/rabbitmq/autocluster-0.4.1.ez:/usr/lib/rabbitmq/lib/rabbitmq_server-3.5.5/plugins/autocluster-0.4.1.ez"
#    networks:
#      - backend

### Elastic search Setup ############################################

#  elasticsearch:
#    container_name: elasticsearch
#    image: elasticsearch:latest
#    ports:
#      - "9200:9200"
#    volumes:
#      - ./backup/eldata:/eldata
#    networks:
#      - backend

### kibana Setup ############################################

#  kibana:
#    container_name: kibana
#    image: kibana:latest
#    ports:
#      - "5601:5601"
#    links:
#      - elasticsearch
#    volumes:
#      - ./backup/eldata:/kibana
#    networks:
#      - backend

### Networks Setup ############################################

networks:
  frontend:
    driver: "bridge"
  backend:
    driver: "bridge"
